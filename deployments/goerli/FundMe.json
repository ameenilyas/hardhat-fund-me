{
  "address": "0x380c019Dd1bDB8868A753e2509156A5B44b90FcA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f2559a98f72a83dc63af390ebecb4b41f94503a3cb37c61bda5931f0e6a0c79",
  "receipt": {
    "to": null,
    "from": "0x9B953c6A46b2C65209e924fD8Da2cd9ff9Ec5EDc",
    "contractAddress": "0x380c019Dd1bDB8868A753e2509156A5B44b90FcA",
    "transactionIndex": 44,
    "gasUsed": "1022496",
    "logsBloom": "0x
    "blockHash": "0x490a3daf53aab4e853bcbf1f6ea48d0f3d5deb917fa55cf35af1b20a1225ceb3",
    "transactionHash": "0x4f2559a98f72a83dc63af390ebecb4b41f94503a3cb37c61bda5931f0e6a0c79",
    "logs": [],
    "blockNumber": 8514645,
    "cumulativeGasUsed": "20614613",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "aca6c02b6c6ce8b4e6f399bc006aa37e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ameen Ilyas\",\"details\":\"This implements price feed as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding conract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// pragma\\npragma solidity ^0.8.8;\\n\\n// import\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// error\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Ameen Ilyas\\n * @notice This contract is to demo a sample funding conract\\n * @dev This implements price feed as our library\\n */\\n\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    mapping(address => uint256) public s_addressToAmountFunded; // storage variables. Opcode\\n    address[] private s_funders; // storage variables. Opcode\\n\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface public s_priceFeed; // storage variables. Opcode\\n\\n    // modifier\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Function Orders\\n    // -- constructor\\n    // -- receive\\n    // -- fallback\\n    // -- external\\n    // -- public\\n    // -- internal\\n    // -- private\\n    // -- view / pure\\n\\n    constructor(AggregatorV3Interface priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /**\\n     * @notice This function funds this contract\\n     */\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // view / pure\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x5101055cd7175305a447321f012d25e4c2c883f0b0346dc9dd4de795801f5183\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x8afdf3598e77005962ba60cdf7c45bd493d3e56905a7afb7c80e1fe5f307789f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012b2380380620012b2833981810160405281019062000037919062000131565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000163565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b6000620000f982620000d8565b9050919050565b6200010b81620000ec565b81146200011757600080fd5b50565b6000815190506200012b8162000100565b92915050565b6000602082840312156200014a5762000149620000b3565b5b60006200015a848285016200011a565b91505092915050565b60805161111e62000194600039600081816102ac015281816104fb01528181610685015261087b015261111e6000f3fe6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461017d5780639e87a5cd146101a8578063b60d4288146101d3578063be2693f0146101dd578063d7b4750c146101e757610091565b80630343fb25146100965780630ec3b027146100d35780631bf6132d146100fe5780633ccfd60b1461013b5780636b69a59214610152575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610b30565b610224565b6040516100ca9190610b76565b60405180910390f35b3480156100df57600080fd5b506100e861026c565b6040516100f59190610bf0565b60405180910390f35b34801561010a57600080fd5b5061012560048036038101906101209190610b30565b610292565b6040516101329190610b76565b60405180910390f35b34801561014757600080fd5b506101506102aa565b005b34801561015e57600080fd5b506101676104ea565b6040516101749190610b76565b60405180910390f35b34801561018957600080fd5b506101926104f7565b60405161019f9190610c1a565b60405180910390f35b3480156101b457600080fd5b506101bd61051f565b6040516101ca9190610bf0565b60405180910390f35b6101db610549565b005b6101e5610683565b005b3480156101f357600080fd5b5061020e60048036038101906102099190610c61565b610911565b60405161021b9190610c1a565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103da5760006001828154811061035557610354610c8e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103d290610cec565b915050610332565b50600067ffffffffffffffff8111156103f6576103f5610d34565b5b6040519080825280602002602001820160405280156104245781602001602082028036833780820191505090505b506001908051906020019061043a929190610a26565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161046190610d94565b60006040518083038185875af1925050503d806000811461049e576040519150601f19603f3d011682016040523d82523d6000602084013e6104a3565b606091505b50509050806104e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104de90610e06565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610588600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095990919063ffffffff16565b10156105c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c090610e72565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106179190610e92565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610708576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561078c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610742575b5050505050905060005b81518110156108165760008282815181106107b4576107b3610c8e565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061080e90610cec565b915050610796565b50600067ffffffffffffffff81111561083257610831610d34565b5b6040519080825280602002602001820160405280156108605781602001602082028036833780820191505090505b5060019080519060200190610876929190610a26565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108bd90610d94565b60006040518083038185875af1925050503d80600081146108fa576040519150601f19603f3d011682016040523d82523d6000602084013e6108ff565b606091505b505090508061090d57600080fd5b5050565b60006001828154811061092757610926610c8e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061096583610995565b90506000670de0b6b3a7640000858361097e9190610ec6565b6109889190610f37565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190610ff5565b5050509150506402540be40081610a1e9190611070565b915050919050565b828054828255906000526020600020908101928215610a9f579160200282015b82811115610a9e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a46565b5b509050610aac9190610ab0565b5090565b5b80821115610ac9576000816000905550600101610ab1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610afd82610ad2565b9050919050565b610b0d81610af2565b8114610b1857600080fd5b50565b600081359050610b2a81610b04565b92915050565b600060208284031215610b4657610b45610acd565b5b6000610b5484828501610b1b565b91505092915050565b6000819050919050565b610b7081610b5d565b82525050565b6000602082019050610b8b6000830184610b67565b92915050565b6000819050919050565b6000610bb6610bb1610bac84610ad2565b610b91565b610ad2565b9050919050565b6000610bc882610b9b565b9050919050565b6000610bda82610bbd565b9050919050565b610bea81610bcf565b82525050565b6000602082019050610c056000830184610be1565b92915050565b610c1481610af2565b82525050565b6000602082019050610c2f6000830184610c0b565b92915050565b610c3e81610b5d565b8114610c4957600080fd5b50565b600081359050610c5b81610c35565b92915050565b600060208284031215610c7757610c76610acd565b5b6000610c8584828501610c4c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cf782610b5d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d2957610d28610cbd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d7e600083610d63565b9150610d8982610d6e565b600082019050919050565b6000610d9f82610d71565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610df0600b83610da9565b9150610dfb82610dba565b602082019050919050565b60006020820190508181036000830152610e1f81610de3565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e5c601b83610da9565b9150610e6782610e26565b602082019050919050565b60006020820190508181036000830152610e8b81610e4f565b9050919050565b6000610e9d82610b5d565b9150610ea883610b5d565b9250828201905080821115610ec057610ebf610cbd565b5b92915050565b6000610ed182610b5d565b9150610edc83610b5d565b9250828202610eea81610b5d565b91508282048414831517610f0157610f00610cbd565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f4282610b5d565b9150610f4d83610b5d565b925082610f5d57610f5c610f08565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f8781610f68565b8114610f9257600080fd5b50565b600081519050610fa481610f7e565b92915050565b6000819050919050565b610fbd81610faa565b8114610fc857600080fd5b50565b600081519050610fda81610fb4565b92915050565b600081519050610fef81610c35565b92915050565b600080600080600060a0868803121561101157611010610acd565b5b600061101f88828901610f95565b955050602061103088828901610fcb565b945050604061104188828901610fe0565b935050606061105288828901610fe0565b925050608061106388828901610f95565b9150509295509295909350565b600061107b82610faa565b915061108683610faa565b925082820261109481610faa565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110cc576110cb610cbd565b5b82820584148315176110e1576110e0610cbd565b5b509291505056fea2646970667358221220a43e6c33920e8bd6ca1953639f070cb95951b0310427378d5ed88f1037282d8064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461017d5780639e87a5cd146101a8578063b60d4288146101d3578063be2693f0146101dd578063d7b4750c146101e757610091565b80630343fb25146100965780630ec3b027146100d35780631bf6132d146100fe5780633ccfd60b1461013b5780636b69a59214610152575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610b30565b610224565b6040516100ca9190610b76565b60405180910390f35b3480156100df57600080fd5b506100e861026c565b6040516100f59190610bf0565b60405180910390f35b34801561010a57600080fd5b5061012560048036038101906101209190610b30565b610292565b6040516101329190610b76565b60405180910390f35b34801561014757600080fd5b506101506102aa565b005b34801561015e57600080fd5b506101676104ea565b6040516101749190610b76565b60405180910390f35b34801561018957600080fd5b506101926104f7565b60405161019f9190610c1a565b60405180910390f35b3480156101b457600080fd5b506101bd61051f565b6040516101ca9190610bf0565b60405180910390f35b6101db610549565b005b6101e5610683565b005b3480156101f357600080fd5b5061020e60048036038101906102099190610c61565b610911565b60405161021b9190610c1a565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103da5760006001828154811061035557610354610c8e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103d290610cec565b915050610332565b50600067ffffffffffffffff8111156103f6576103f5610d34565b5b6040519080825280602002602001820160405280156104245781602001602082028036833780820191505090505b506001908051906020019061043a929190610a26565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161046190610d94565b60006040518083038185875af1925050503d806000811461049e576040519150601f19603f3d011682016040523d82523d6000602084013e6104a3565b606091505b50509050806104e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104de90610e06565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610588600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095990919063ffffffff16565b10156105c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c090610e72565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106179190610e92565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610708576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561078c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610742575b5050505050905060005b81518110156108165760008282815181106107b4576107b3610c8e565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061080e90610cec565b915050610796565b50600067ffffffffffffffff81111561083257610831610d34565b5b6040519080825280602002602001820160405280156108605781602001602082028036833780820191505090505b5060019080519060200190610876929190610a26565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108bd90610d94565b60006040518083038185875af1925050503d80600081146108fa576040519150601f19603f3d011682016040523d82523d6000602084013e6108ff565b606091505b505090508061090d57600080fd5b5050565b60006001828154811061092757610926610c8e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061096583610995565b90506000670de0b6b3a7640000858361097e9190610ec6565b6109889190610f37565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190610ff5565b5050509150506402540be40081610a1e9190611070565b915050919050565b828054828255906000526020600020908101928215610a9f579160200282015b82811115610a9e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a46565b5b509050610aac9190610ab0565b5090565b5b80821115610ac9576000816000905550600101610ab1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610afd82610ad2565b9050919050565b610b0d81610af2565b8114610b1857600080fd5b50565b600081359050610b2a81610b04565b92915050565b600060208284031215610b4657610b45610acd565b5b6000610b5484828501610b1b565b91505092915050565b6000819050919050565b610b7081610b5d565b82525050565b6000602082019050610b8b6000830184610b67565b92915050565b6000819050919050565b6000610bb6610bb1610bac84610ad2565b610b91565b610ad2565b9050919050565b6000610bc882610b9b565b9050919050565b6000610bda82610bbd565b9050919050565b610bea81610bcf565b82525050565b6000602082019050610c056000830184610be1565b92915050565b610c1481610af2565b82525050565b6000602082019050610c2f6000830184610c0b565b92915050565b610c3e81610b5d565b8114610c4957600080fd5b50565b600081359050610c5b81610c35565b92915050565b600060208284031215610c7757610c76610acd565b5b6000610c8584828501610c4c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cf782610b5d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d2957610d28610cbd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d7e600083610d63565b9150610d8982610d6e565b600082019050919050565b6000610d9f82610d71565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610df0600b83610da9565b9150610dfb82610dba565b602082019050919050565b60006020820190508181036000830152610e1f81610de3565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e5c601b83610da9565b9150610e6782610e26565b602082019050919050565b60006020820190508181036000830152610e8b81610e4f565b9050919050565b6000610e9d82610b5d565b9150610ea883610b5d565b9250828201905080821115610ec057610ebf610cbd565b5b92915050565b6000610ed182610b5d565b9150610edc83610b5d565b9250828202610eea81610b5d565b91508282048414831517610f0157610f00610cbd565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f4282610b5d565b9150610f4d83610b5d565b925082610f5d57610f5c610f08565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f8781610f68565b8114610f9257600080fd5b50565b600081519050610fa481610f7e565b92915050565b6000819050919050565b610fbd81610faa565b8114610fc857600080fd5b50565b600081519050610fda81610fb4565b92915050565b600081519050610fef81610c35565b92915050565b600080600080600060a0868803121561101157611010610acd565b5b600061101f88828901610f95565b955050602061103088828901610fcb565b945050604061104188828901610fe0565b935050606061105288828901610fe0565b925050608061106388828901610f95565b9150509295509295909350565b600061107b82610faa565b915061108683610faa565b925082820261109481610faa565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110cc576110cb610cbd565b5b82820584148315176110e1576110e0610cbd565b5b509291505056fea2646970667358221220a43e6c33920e8bd6ca1953639f070cb95951b0310427378d5ed88f1037282d8064736f6c63430008110033",
  "devdoc": {
    "author": "Ameen Ilyas",
    "details": "This implements price feed as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding conract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}